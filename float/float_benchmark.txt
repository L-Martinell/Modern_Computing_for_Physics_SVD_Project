This file contains the results of the benchmarking of the SVD on single precision floating point numbers.

###################################### CPU ######################################
Matrix size: 256 x 128, Frobenius norm: 0.073965, time elapsed (SVD CPU float, custom): 4.0233060000 s
Matrix size: 256 x 128, Frobenius norm: 0.000264, time elapsed (SVD CPU float, LAPACK): 0.1768490000 s
Matrix size: 512 x 256, Frobenius norm: 0.208566, time elapsed (SVD CPU float, custom): 29.4212970000 s
Matrix size: 512 x 256, Frobenius norm: 0.000793, time elapsed (SVD CPU float, LAPACK): 1.5116610000 s
Matrix size: 1024 x 512, Frobenius norm: 0.548409, time elapsed (SVD CPU float, custom): 271.5339350000 s
Matrix size: 1024 x 512, Frobenius norm: 0.003426, time elapsed (SVD CPU float, LAPACK): 3.4725240000 s
Matrix size: 2048 x 1024, Frobenius norm: 0.008046, time elapsed (SVD CPU float, LAPACK): 12.3130300000 s





###################################### GPU ######################################
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float): 0.0344046707 s; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (8, 8); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float): 0.0342638092 s; MatrixTranspositionKernel (matrix A): gridSize = (8, 16), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (16, 16), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (8, 8), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (8, 16), blockSize = (16, 16); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float): 0.0343205757 s; MatrixTranspositionKernel (matrix A): gridSize = (4, 8), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (8, 8), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (4, 4), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (4, 8), blockSize = (32, 32); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048

Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float): 0.0624653435 s; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (8, 8); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096
Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float): 0.0637352638 s; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (16, 16); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096
Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float): 0.0634665604 s; MatrixTranspositionKernel (matrix A): gridSize = (8, 16), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (16, 16), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (8, 8), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (8, 16), blockSize = (32, 32); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096

Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float): 0.1127194595 s; MatrixTranspositionKernel (matrix A): gridSize = (64, 128), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (128, 128), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (64, 64), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (64, 128), blockSize = (8, 8); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192
Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float): 0.1058969955 s; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (16, 16); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192
Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float): 0.1045262756 s; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (32, 32); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192

Matrix size: 2048 x 1024, Frobenius norm: 0.003493, time elapsed (SVD GPU float): 0.3244374084 s; MatrixTranspositionKernel (matrix A): gridSize = (128, 256), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (256, 256), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (128, 128), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (128, 256), blockSize = (8, 8); MatrixReductionKernel: gridSize = 4096, blockSize = 512, shared Memory size = 4096
Matrix size: 2048 x 1024, Frobenius norm: 0.003493, time elapsed (SVD GPU float): 0.2963450928 s; MatrixTranspositionKernel (matrix A): gridSize = (64, 128), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (128, 128), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (64, 64), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (64, 128), blockSize = (16, 16); MatrixReductionKernel: gridSize = 4096, blockSize = 512, shared Memory size = 4096
Matrix size: 2048 x 1024, Frobenius norm: 0.003493, time elapsed (SVD GPU float): 0.2897618103 s; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (32, 32); MatrixReductionKernel: gridSize = 4096, blockSize = 512, shared Memory size = 4096

Matrix size: 4096 x 2048, Frobenius norm: 0.008702, time elapsed (SVD GPU float): 1.5161317139 s; MatrixTranspositionKernel (matrix A): gridSize = (256, 512), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (512, 512), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (256, 256), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (256, 512), blockSize = (8, 8); MatrixReductionKernel: gridSize = 8192, blockSize = 1024, shared Memory size = 8192
Matrix size: 4096 x 2048, Frobenius norm: 0.008702, time elapsed (SVD GPU float): 1.3469427490 s; MatrixTranspositionKernel (matrix A): gridSize = (128, 256), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (256, 256), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (128, 128), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (128, 256), blockSize = (16, 16); MatrixReductionKernel: gridSize = 8192, blockSize = 1024, shared Memory size = 8192
Matrix size: 4096 x 2048, Frobenius norm: 0.008702, time elapsed (SVD GPU float): 1.2860386963 s; MatrixTranspositionKernel (matrix A): gridSize = (64, 128), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (128, 128), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (64, 64), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (64, 128), blockSize = (32, 32); MatrixReductionKernel: gridSize = 8192, blockSize = 1024, shared Memory size = 8192





################################# GPU, sharedMem #################################
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float, sharedMem): 0.0599323196 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (8, 8); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float, sharedMem): 0.0333072014 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (8, 16), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (16, 16); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float, sharedMem): 0.0331784325 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (4, 8), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (32, 32); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048

Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float, sharedMem): 0.0332399025 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (16, 16), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (8, 8), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (8, 16), blockSize = (8, 8); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float, sharedMem): 0.0336053123 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (8, 16), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (16, 16), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (8, 8), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (8, 16), blockSize = (16, 16); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float, sharedMem): 0.0326384659 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (4, 8), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (16, 16), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (8, 8), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (8, 16), blockSize = (32, 32); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048

Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float, sharedMem): 0.0601210861 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (8, 8), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (4, 4), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (4, 8), blockSize = (8, 8); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float, sharedMem): 0.0326997108 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (8, 16), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (8, 8), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (4, 4), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (4, 8), blockSize = (16, 16); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048
Matrix size: 256 x 128, Frobenius norm: 0.000190, time elapsed (SVD GPU float, sharedMem): 0.0323692169 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (4, 8), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (8, 8), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (4, 4), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (4, 8), blockSize = (32, 32); MatrixReductionKernel: gridSize = 128, blockSize = 256, shared Memory size = 2048


Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float, sharedMem): 0.0607002563 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (8, 8); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096
Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float, sharedMem): 0.0619812164 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (16, 16); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096
Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float, sharedMem): 0.0623224335 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (8, 16), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (32, 32); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096

Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float, sharedMem): 0.0615537262 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (8, 8); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096
Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float, sharedMem): 0.0626511688 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (16, 16); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096
Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float, sharedMem): 0.0601134415 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (8, 16), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (32, 32); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096

Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float, sharedMem): 0.0614132805 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (16, 16), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (8, 8), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (8, 16), blockSize = (8, 8); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096
Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float, sharedMem): 0.0599326706 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (16, 16), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (8, 8), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (8, 16), blockSize = (16, 16); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096
Matrix size: 512 x 256, Frobenius norm: 0.000588, time elapsed (SVD GPU float, sharedMem): 0.0634643517 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (8, 16), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (16, 16), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (8, 8), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (8, 16), blockSize = (32, 32); MatrixReductionKernel: gridSize = 256, blockSize = 512, shared Memory size = 4096


Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float, sharedMem): 0.1053235168 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (64, 128), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (128, 128), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (64, 64), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (64, 128), blockSize = (8, 8); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192
Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float, sharedMem): 0.1039531860 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (128, 128), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (64, 64), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (64, 128), blockSize = (16, 16); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192
Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float, sharedMem): 0.1048848648 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (128, 128), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (64, 64), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (64, 128), blockSize = (32, 32); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192

Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float, sharedMem): 0.1026370850 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (64, 128), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (8, 8); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192
Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float, sharedMem): 0.1010807037 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (16, 16); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192
Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float, sharedMem): 0.1088879395 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (32, 32); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192

Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float, sharedMem): 0.1042900772 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (64, 128), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (8, 8); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192
Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float, sharedMem): 0.1033064957 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (16, 16); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192
Matrix size: 1024 x 512, Frobenius norm: 0.001532, time elapsed (SVD GPU float, sharedMem): 0.1073743057 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (16, 32), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (32, 32), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (16, 16), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (16, 32), blockSize = (32, 32); MatrixReductionKernel: gridSize = 512, blockSize = 1024, shared Memory size = 8192


Matrix size: 2048 x 1024, Frobenius norm: 0.003493, time elapsed (SVD GPU float, sharedMem): 0.3079880371 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (128, 256), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (256, 256), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (128, 128), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (128, 256), blockSize = (8, 8); MatrixReductionKernel: gridSize = 4096, blockSize = 512, shared Memory size = 4096

Matrix size: 2048 x 1024, Frobenius norm: 0.003493, time elapsed (SVD GPU float, sharedMem): 0.3004511108 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (64, 128), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (128, 128), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (64, 64), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (64, 128), blockSize = (16, 16); MatrixReductionKernel: gridSize = 4096, blockSize = 512, shared Memory size = 4096

Matrix size: 2048 x 1024, Frobenius norm: 0.003493, time elapsed (SVD GPU float, sharedMem): 0.2893503418 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (32, 64), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (64, 64), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (32, 32), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (32, 64), blockSize = (32, 32); MatrixReductionKernel: gridSize = 4096, blockSize = 512, shared Memory size = 4096


Matrix size: 4096 x 2048, Frobenius norm: 0.008702, time elapsed (SVD GPU float, sharedMem): 1.3948942871 s; Tile size: 8; MatrixTranspositionKernel (matrix A): gridSize = (256, 512), blockSize = (8, 8); MatrixTranspositionKernel (matrix U): gridSize = (512, 512), blockSize = (8, 8); MatrixTranspositionKernel (matrix V): gridSize = (256, 256), blockSize = (8, 8); MatrixMultiplicationKernel: gridSize = (256, 512), blockSize = (8, 8); MatrixReductionKernel: gridSize = 8192, blockSize = 1024, shared Memory size = 8192

Matrix size: 4096 x 2048, Frobenius norm: 0.008702, time elapsed (SVD GPU float, sharedMem): 1.3137119141 s; Tile size: 16; MatrixTranspositionKernel (matrix A): gridSize = (128, 256), blockSize = (16, 16); MatrixTranspositionKernel (matrix U): gridSize = (256, 256), blockSize = (16, 16); MatrixTranspositionKernel (matrix V): gridSize = (128, 128), blockSize = (16, 16); MatrixMultiplicationKernel: gridSize = (128, 256), blockSize = (16, 16); MatrixReductionKernel: gridSize = 8192, blockSize = 1024, shared Memory size = 8192

Matrix size: 4096 x 2048, Frobenius norm: 0.008702, time elapsed (SVD GPU float, sharedMem): 1.2626939697 s; Tile size: 32; MatrixTranspositionKernel (matrix A): gridSize = (64, 128), blockSize = (32, 32); MatrixTranspositionKernel (matrix U): gridSize = (128, 128), blockSize = (32, 32); MatrixTranspositionKernel (matrix V): gridSize = (64, 64), blockSize = (32, 32); MatrixMultiplicationKernel: gridSize = (64, 128), blockSize = (32, 32); MatrixReductionKernel: gridSize = 8192, blockSize = 1024, shared Memory size = 8192
